#!/bin/bash

#################################################
# LAPS for MAC
#################################################

##FOUND AT https://github.com/therealmacjeezy/Scripts/blob/master/LAPS%20for%20Mac/LAPSforMac.sh

########### Parameters (Required) ###############
# 4 - API Username String
# 5 - API Password String
# 6 - Rescue Admin Username
# 7 - Old Password (Required for first usage)
# 8 - Local Admin Username
# 9 - Local Admin Password

passLocation="/Library/Application Support/COMPANYNAME/rescue"
#get the filepath
pathLocation=$(dirname "$passLocation")
#make sure the filepath exists
mkdir -p "$pathLocation"
# locate the pythonscript
pythonScript="$pathLocation/passphrase/pass_phrase.py"
# check to see if python is installed. pass_phrase.py should work with python 2 or 3
pythonCheck=$(python -V  2>&1)

## if the passphrase PythonScript doesn't exist then install it
if [[ ! -e "$pythonScript" ]] ; then
	jamf policy -trigger installpassphrase
fi
sleep 5

# HARDCODED VALUES
jssURL="https://covermymeds.jamfcloud.com"
udid=$(/usr/sbin/system_profiler SPHardwareDataType | /usr/bin/awk '/Hardware UUID:/ { print $3 }')
## extAttName also needs to be changed in the curl command in setEAStatus function.
extAttName="\"RescuePassword\""

## If the passphrase script exists get the passphrase from there. Else do a random passphrase
if [[ -e "$pythonScript" ]]  && [[ "$pythonCheck" == *"Python"* ]]; then
	cd "$pathLocation/passphrase"
	echo "Python Script installed. Python check passed == $pythonCheck"
	newPass=$(python "$pythonScript" -s "" --min=4 --max=5 -L)
	echo "$newPass" > "$passLocation"
	getPass=$(cat "$passLocation")	
else
	echo "Python script missing, or python check failed == $pythonCheck"
	newPass=$(env LC_CTYPE=C tr -dc "A-HJ-KM-Za-hj-km-z0-9" < /dev/urandom | head -c 24 > "$passLocation")
	getPass=$(cat "$passLocation")
fi

# Decrypt String
DecryptString() {
	# Usage: ~$ DecryptString "Encrypted String" "Salt" "Passphrase"
	echo "${1}" | /usr/bin/openssl enc -aes256 -d -a -A -S "${2}" -k "${3}"
}

# Account Information
if [[ -z "$4" ]]; then 
    echo "Error: API USER MISSING"
    exit 1
else
	apiUser="$4"        
fi

if [[ -z "$5" ]]; then
	echo "Error: API PASS MISSING"
    exit 1        
else
	apiPass="$5"
fi

if [[ -z "$6" ]]; then
    echo "ERROR: RESCUE USERNAME NAME MISSING"
    exit 1
else
    rescueUser="$6"
fi

if [[ -z "$8" ]];then
	echo "ERROR: LOCAL ADMIN USERNAME MISSING"
	exit 1
else
	adminName="$8"
fi
if [[ -z "$9" ]];then
	echo "ERROR: LOCAL ADMIN PASSWORD MISSING"
	exit 1
else
	adminPass="$9"
fi


# Verify local rescue account exists
checkUser=$(dseditgroup -o checkmember -m $rescueUser localaccounts | awk '{ print $1 }')
 
if [[ "$checkUser" = "yes" ]];then
    echo "$rescueUser is a local user"
else
    echo "ERROR: $rescueUser is not a local user! :( Exiting."
    exit 1
fi

# Magic Below
passwordCheck() {
    passCheck=$(/usr/bin/dscl /Local/Default -authonly "$rescueUser" "$oldPass")
    if [[ -z "$passCheck" ]]; then
        echo "Continue"
    else
        echo "ERROR: Password is either old or unknown, checking EA"
        oldPass=$(curl -s -f -u $apiUser:$apiPass -H "Accept: application/xml" $jssURL/JSSResource/computers/udid/$udid/subset/extension_attributes | xpath "//extension_attribute[name=$extAttName]" 2>&1 | awk -F'<value>|</value>' '{print $2}' | tail -1)
        passCheck2=$(/usr/bin/dscl /Local/Default -authonly "$rescueUser" "$oldPass")
            if [[ ! -z "$passCheck2" ]]; then
                echo "ERROR: Password is unknown. Exiting"
                echo "Either computer could not reach Jamf server. Or password on Jamf Server is wrong."
                exit 1
            fi
    fi
}

if [[ ! -z "$7" ]]; then
	echo "$7"
    oldPass="$7"
   #passwordCheck
else
    oldPass=$(curl -s -f -u $apiUser:$apiPass -H "Accept: application/xml" $jssURL/JSSResource/computers/udid/$udid/subset/extension_attributes | xpath "//extension_attribute[name=$extAttName]" 2>&1 | awk -F'<value>|</value>' '{print $2}')
    #passwordCheck
fi

genLAPS() {
    /usr/sbin/sysadminctl -adminUser $adminName -adminPassword $adminPass -resetPasswordFor $rescueUser -newPassword $getPass
}

resetCheck() {
    /usr/bin/dscl /Local/Default -authonly "$rescueUser" "$getPass"
    echo "New Password works as: $getPass"    
}

setEAStatus() {

echo "setting EA status"

apiData="<computer><extension_attributes><extension_attribute><name>RescuePassword</name><type>String</type><input_type><type>Text Field</type></input_type><value>${getPass}</value></extension_attribute></extension_attributes></computer>"
echo ${apiData}

fullURL="$jssURL/JSSResource/computers/udid/$udid/subset/extension_attributes"
echo ${fullURL}

apiPost=$(curl -s -f -u $apiUser:"$apiPass" -X "PUT" ${fullURL} -H "Content-Type: application/xml" -H "Accept: application/xml" -d "${apiData}" 2>&1 )

/bin/echo ${apiPost}

#rm -f /tmp/pwlaps
}


uploadCheck() {
echo "Checking Password"
checkPass=$(curl -s -f -u $apiUser:"$apiPass" -H "Accept: application/xml" $jssURL/JSSResource/computers/udid/$udid/subset/extension_attributes | xpath "//extension_attribute[name=$extAttName]" 2>&1 | awk -F'<value>|</value>' '{print $2}')
checkPass=`echo "$checkPass" | tr -d '\040\011\012\015'`
echo "$checkPass"
echo "getPass"
echo "$getPass"

if [[ "$checkPass" == "$getPass" ]] ; then
	echo "password uploaded successfully"
	rm -f "$passLocation"
else
	echo "password failed to upload to jamf"
	echo "trying again"
	setEAStatus
fi
}

updateFV2() {

fdesetup remove -user $rescueUser

expect -c "
spawn fdesetup add -usertoadd $rescueUser
expect \"Enter the primary user name:\"
send ${adminName}\r
expect \"Enter the password for the user '$adminName':\"
send ${adminPass}\r
expect \"Enter the password for the added user '$rescueUser':\"
send ${getPass}\r
expect" 

fdeList=`fdesetup list | grep $rescueUser`

if [[ "$fdeList" == *"$rescueUser"* ]] ; then
	echo "$rescueUser Added to FileVault successfully"
else
	echo "Adding $rescueUser to FV2 Failed"
fi

}

genLAPS
resetCheck
setEAStatus
updateFV2
uploadCheck
